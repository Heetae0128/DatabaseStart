
오늘의 목표는 1번부터 7번까지 입니다.
drop table users;
drop table carinfo;

create table users(
id varchar2(8), 
name varchar2(10), 
addr varchar2(10));

create table carinfo(
c_num varchar2(4),   --자동차 번호
c_name varchar2(10),  -- 자동차 종류
 id varchar2(8));

insert into users values ('1111','kim','수원');
insert into users values ('2222','lee','서울');
insert into users values ('3333','park','대전');
insert into users values ('4444','choi','대전');

insert into carinfo values ('1234','중형','1111');
insert into carinfo values ('3344','소형','1111');
insert into carinfo values ('5566','중형','3333');
insert into carinfo values ('6677','중형','3333');
insert into carinfo values ('7788','중형','4444');
insert into carinfo values ('8888','중형','5555');


위 자료를 회원이 등록한 자동차 정보이다.
1. 회원의 이름과 주소를 출력하시오.
select name,addr
from users;

2. 회원의 이름과 소유한 자동차 번호를 출력하시오.
select u.name, c.c_num
from users u, carinfo c
where u.id = c.id;

3. 자동차 번호가 7788인 소유자의 이름과 주소를 출력하시오.
1.  조인을 해서 조건절로 7788인 자동차의 소유자의 정보를 출력 > 조인
select u.name, u.addr
from users u, carinfo c
where u.id = c.id and c.c_num = '7788';

2. 7788소유자의 회원아이디를 검색 한 후 결과값을 본 쿼리의 조건 > 서브쿼리
select id from carinfo where c_num='7788';
select name,addr
from users
where id=(select id from carinfo where c_num='7788');

4. 자동차를 소유하지 않은 사람의 이름과 주소를 출력하시오.
select u.name, u.addr
from users u
left outer join carinfo c
on u.id=c.id
where c.id is null;

5. 회원별 등록한 자동차 수를 출력하시오.
select u.*, c.*
from users u, carinfo c
where u.id = c.id;

select u.name, count(*)
from users u, carinfo c
where u.id = c.id
group by u.name;		-- 동명이인일 수도 있으니 u.id로 그룹하자 에러
			-- select u.name은 다중행이다
select u.name, count(*)
from users u, carinfo c
where u.id = c.id
group by u.name, u.id;	-- groub by를 복합속성으로 정의하자.

6. 2대 이상을 소유한 회원의 이름과 소유한 자동차 수를 출력하시오.
조건이 2대이상 
즉, where 인지 having인지 파악
having절에서 count(*)함수를 조건절로 사용할 수 있다.

select u.name, count(*)
from users u, carinfo c
where u.id = c.id
group by u.name, u.id 
having count(*) > = 2;



7. 자동차는 등록되어 있는데 소유자가 없는 자동차 번호를 출력하시오.
팁, 먼저 보는 테이블과 나중에 보는 테이블의 순서를 기억..
먼저 보는 테이블은 carinfo,  두번째는 users
select c.c_num  소유자없음
from carinfo c
left outer join users u
on c.id = u.id
where u.id is null;


-- 다음 부터는 3개 테이블을 조인하는 문제입니다.

-- companycar 회사에서 구매한 자동차를 의미, 
carinfo는 직원에게 배정한 자동차

다음 테이블을 생성하시오.
create table companycar(     -- 자동차 정보
c_num varchar2(4),   -- 차번호
c_com varchar2(30),   --제조사
c_name varchar2(10),  -- 차이름
c_price number);  -- 차 가격

다음 튜플을 삽입하세요
insert into companycar values ('1234','현다','소나타',1000);
insert into companycar values ('3344','기와','축제',2000);
insert into companycar values ('7788','기와','레2',800);
insert into companycar values ('9900','현다','그랭저',2100);

8. 배정 자동차의 차번호, 제조사, 자동차명, 가격을 출력하시오.
carinfo 배정 자동차의 정보로 가정... 차번호는 carinfo해결가능하지만
제조사와 자동차명과 가격은 companycar테이블에 있다. 이너조인
select c.c_num, p.c_com, p.c_name, p.c_price
from carinfo c, companycar p
where c.c_num = p.c_num;

9. 회사에서구매는 하였지만 
배정되지 않은 자동차의 차번호, 제조자, 자동차 이름을 출력
companycar 테이블에 보유한 자동차 정보를 확인, 이 자동차 배정되었는지
확인하기 위해서 carinfo테이블 확인.. 배정된 자동차는 이너조인
배정이 안된 자동차는 아우터 조인.. 이 때 companycar를 left
select p.c_num, p.c_com, p.c_name
from companycar p
left outer join carinfo c
on c.c_num = p.c_num
where c.c_num is null;

10. 자동차 가격이 1000만원 이상인 자동차의 자동차 번호를 출력하시오.
select c_num
from companycar
where c_price >= 1000;

11. 배정된 자동차 중에 회사에서 구매한 자동차가 아닌 자동차 번호를 출력하시오.
select c.c_num
from carinfo c 
left outer join companycar p
on c.c_num = p.c_num
where p.c_name is null;


12. 모든 사람의 정보를 출력하시오. 이름, 배정받은 자동차번호, 자동차이름
관련테이블은 users, carinfo, companycar
조인해서 만들고 싶은 테이블은
users.name carinfo.c_num campanycar.c_name
즉 테이블3개를 조인. 이때는 순서를 정하고 순서대로 2개씩 조인하고
그 결과의 논리테이블과 다음 테이블을 조인 .. 진행
select u.name, NVL(c.c_num, '없음'),  NVL(cc.c_name, '없음')
from users u
left outer join carinfo c
on u.id = c.id
left outer join companycar cc
on c.c_num = cc.c_num;

select cc.name, cc.c_num, p.c_name
from companycar p, (select u.name, c.c_num
from users u, carinfo c
where u.id = c.id) cc
where p.c_num = cc.c_num;

-12번의 서비스를 제공하기 위해 view를 만들어 줌
create view all_users as
(select u.name name, NVL(c.c_num, '없음') carnum,  NVL(cc.c_name, '없음') carname
from users u
left outer join carinfo c
on u.id = c.id
left outer join companycar cc
on c.c_num = cc.c_num)
;
select * from all_users;	-- view 이름으로 조회가 가능하다.
select name, carnum, carnum, carname from all_users;

view를 통해서 insert, delete, update가 이론적으로는 가능하지만
테이블의 무결성 제약조건에 위배가 되지 않아야 한다.
이런 점에서 view는 조인의 목표로 많이 쓴다.

-- 고찰
테이블은 데이터 중복을 최소화 하기 위해 정규화 되어야 하고,
정규화는 테이블을 분리하는 의미가 있다.
그런데, 서비스를 이용하는 고객입장에서는 2개 이상의 테이블이 조인이
되어야 하는 경우가 있다.
그래서 정규화는 설계자의 입장이고, 조인은 서비스를 제공하는 입장의
기술이다.
그런데, 2개 이상의 테이블이 조인되어야 하는 서비스는
서비스가 이용될때 마다 db는 조인 연산을 계속해야 한다. 쿼리도 복잡하다
간단하게 할 방법은 없을까?
해결 책은 물리적인 테이블은 유지하되, 조인 결과를 합친 논리적인 테이블을
만드는 것이다. 논리적인 테이블은 물리적인 테이블의 데이터로 만들어져 있다.
이런 논리적인 테이블을 뷰라고 한다.

